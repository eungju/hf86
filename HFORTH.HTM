<HTML>
<HEAD>
<TITLE>hForth - A Small, Portable ANS Forth</TITLE>
</HEAD>
<BODY>

<P><I>Originally published in</I>Forth Dimensions XVIII/2, 30</P>

<H1>hForth - A Small, Portable ANS Forth</H1>

Wonyong Koh, Ph.D.</BR>
Taejon, Korea</BR>
wykoh@pado.krict.re.kr</BR>

<H2>Background history</H2> 

<P>I started a personal project two and half years ago, which was in my
mind for quite a long time: Widespread Forth in Korea. Postfix is natural
to Korean people since a verb comes after an object in Korean language.
Also Forth does not restrict a programmer to use only alphanumeric
characters. A Korean Forth programmer can easily express his idea in
comfortable Korean words rather than to be forced to think in English. As
one might expect, there was an effort for Korean Forth. Dr. Chong-Hong
Pyun and Mr. Jin-Mook Park built a Korean version of fig-Forth for Apple
II computer in mid-eighties. Long-time FD readers may remember Dr. Pyun's
letter in <I>Forth Dimensions</I> X/6, 8. Unfortunately, Korean computer
community swiftly moved to IBM PC while Dr. Pyun wrote articles about
their work in popular programming and science magazines. It became
somewhat obsolete before being known widely. Despite of this and other
efforts Forth has been virtually unknown to most Koreans. Two and half
years ago I decided to restart it and looked for a vehicle for the
purpose. I found that there was no small ANS Forth system for IBM PC. I
decided to build one. In the course of ANSifying eForth I have replaced
every line of eForth source and felt that it deserved its own name. I
knew that there were Forth systems named as bForth, cForth, eForth,
gForth, iForth, Jforth and KForth. I picked <I>h</I> since it seemed not
yet used by anyone and also <I>Han</I> means Korean in Korean
language.</P>

<H2>ROM model came first</H2>

<P>eForth, which was written by Mr. Bill Muench and Dr. C. H. Ting in
1990, seemed to be a good place to start. I studied eForth source and Dr.
Ting's article in <I>Forth Dimensions</I> XIII/1, 15 and set the
following goals:</P>

<UL>
<LI>small machine dependent kernel and portable high level code</LI>
<LI>strict compliance to ANS Forth</LI>
<LI>extensive error handling through CATCH/THROW mechanism</LI>
<LI>separated code and name space</LI>
<LI>use of wordlists</LI>
<LI>explicit consideration for separated RAM/ROM address space</LI>
<LI>simple vectored input/output</LI>
<LI>direct threaded code</LI>
<LI>easy upgrade path to optimize for specific CPU</LI>
</UL>

<P>Most of them are adapted from eForth. I emphasize extensive error
handling since some of well-known Forth systems cannot manage as simple a
situation as divide-by-zero. In hForth almost all ambiguous conditions
specified in the ANS Forth document issue <CODE>THROW</CODE> and are
captured by <CODE>CATCH</CODE> either by user-defined word or by hForth
system.</P>

<P>hForth ROM model is especially designed for a minimal development
system for embedded applications which uses non-volatile RAM or ROM
emulator in place of ROM. The content of ROM address space can be changed
during development phase and is copied later to real ROM for production
system. hForth ROM model checks whether or not ROM address space is
alterable when it starts. New definitions go into ROM address space if it
is alterable. Otherwise they go into RAM address space.</P>

<PRE>
  Alterable ROM address space       Unalterable ROM address space
===============================    ===============================
                                    name space of new definitions
                                   -------------------------------

       RAM address space                  RAM address space

-------------------------------    -------------------------------
                                       data space / code space 
          data space                     of new definitions
===============================    ===============================
 name space of old definitions      name space of old definitions
-------------------------------    -------------------------------
 name space of new definitions
-------------------------------

       ROM address space                  ROM address space

-------------------------------    -------------------------------
   data space / code space 
     of new definitions                      data space
-------------------------------    -------------------------------
 code space of old definitions      code space of old definitions
===============================    ===============================
</PRE>

<P>Data space can be allocated either in ROM address space for tables of
constants or in RAM address space for arrays of variables.
<CODE>ROM</CODE> and <CODE>RAM</CODE>, recommended in the Appendix of the
Standard document, are used to switch data space between RAM and ROM
address space. Name space may be excluded in final system if an
application does not require Forth text interpreter. 8086 hForth ROM
model occupies little more than 6 KB of code space for all Core word set
words and requires at least 1 KB of RAM address space for stacks and
system variables.</P>

<P>The assembly source is arranged so that more implementation-dependent
words come earlier. System-dependent words come first, CPU-dependent
words come after, then come all the other high level words. Colon
definitions of all high level words are given as comments in the assembly
source. One needs to redefine only system-dependent words to port hForth
ROM model to a 8086 single board computer from current one for MS-DOS
machine without changing any CPU-dependent words. Standard words come
after essential non-Standard words in each system-dependent,
CPU-dependent, and portable part. All Standard Core word set words are
included to make hForth an ANS Forth system. High level Standard words in
the last part of the assembly source are not used for the implementation
of hForth and can be omitted to make a minimal system. Current 8086
hForth ROM model for MS-DOS has 59 kernel words: 13 system-dependent
words, 21 CPU-dependent non-Standard words and 25 CPU-dependent Standard
words. System-dependent words include input/output words and other words
for file input through keyboard redirection of MS-DOS. For five of kernel
words, including <CODE>(search-wordlist)</CODE> and <CODE>ALIGNED</CODE>,
CPU-dependent definitions are used instead of high level definitions for
faster execution.</P>

<P>System initialization and input/output operations are performed
through following execution vectors: <CODE>'boot</CODE>,
<CODE>'init-i/o</CODE>, <CODE>'ekey?</CODE>, <CODE>'ekey</CODE>,
<CODE>'emit?</CODE>, <CODE>'emit</CODE>, and <CODE>'prompt</CODE>.
Appropriate actions can be taken by redirecting these execution vectors.
<CODE>'init-i/o</CODE> is executed in <CODE>THROW</CODE> and when the
system starts while <CODE>'boot</CODE> is executed only once when the
system starts. One has better chance not to loose control by restoring
i/o vectors through <CODE>'init-i/o</CODE> whenever an exception
condition occurs. For example, serial communication link may not be
broken by an accidental change of communication parameters.
<CODE>'boot</CODE> may be redirected to an appropriate application word
instead of default word in a finished application. Traditional
'ok&lt;end-of-line&gt;' prompt (which is actually not) may be replaced by
redirecting <CODE>'prompt</CODE>.</P>

<P>Control structure matching is rigorously checked for different control
flow stack items. Control-flow stack is implemented on data stack.
Control-flow stack item is represented by two data stack items as
below</P>

<PRE>
Control-flow stack item     Representation (parameter and type)
-----------------------    -------------------------------------
     <I>dest</I>                    control-flow destination      0
     <I>orig</I>                    control-flow origin           1
     <I>of-sys</I>                  OF origin                     2
     <I>case-sys</I>                x (any value)                 3
     <I>do-sys</I>                  ?DO origin           DO destination
     <I>colon-sys</I>               xt of current definition     -1
</PRE>

<P>hForth can detect the nonsense clause "<CODE>BEGIN IF AGAIN
THEN</CODE>" easily. <CODE>CS-ROLL</CODE> and <CODE>CS-PICK</CODE> can be
applied to the list of <I>dest</I>s and <I>orig</I>s only. This can be
verified by checking whether the ORed type is 1. I can not think of a
control-structure-mismatch that current hForth cannot catch.</P>

<P>Number of words grows substantially as a Forth system is extended.
Dictionary search can be time-consuming unless hashing or other means are
employed. Currently hForth uses no special search mechanism, however,
maintains reasonable compilation speed by keeping shallow search depth in
addition to using optimized <CODE>(search-wordlist)</CODE>. Initially two
wordlists are in the search order stack: <CODE>FORTH-WORDLIST</CODE> and
<CODE>NONSTANDARD-WORDLIST</CODE>. <CODE>FORTH-WORDLIST</CODE> contains
all the Standard words and <CODE>NONSTANDARD-WORDLIST</CODE> contains all
the other words. Upon extending hForth, optional Standard words will go
in <CODE>FORTH-WORDLIST</CODE> and lower-level non-Standard words to
implement them will be kept in separate wordlists which are usually not
in the search order stack. Only a small number of non-Standard words to
be used by a user will be added in <CODE>NONSTANDARD-WORDLIST</CODE>.</P>

<H2>RAM and EXE models follow</H2>

<P>hForth package consists of three models: ROM, RAM and EXE model.
hForth RAM model is for RAM only system where name, code and data spaces
are all combined. hForth EXE model is for a system in which code space is
completely separated from data space and execution token (xt) may not be
a valid address in data space. 8086 hForth EXE model uses two 64 KB full
memory segments: one for code space and the other for name and data
spaces. EXE model might be extended for an embedded system where name
space resides in host computer and code and data space are in target
computer. Few kernel words are added to ROM model to derive RAM and EXE
models and only several high level words such as <CODE>HERE</CODE> and
<CODE>CREATE</CODE> are redefined.</P>

<P>ROM and RAM models are probably too slow for many practical
applications as original eForth. However, 8086 hForth EXE model is more
competitive. High-level colon definitions of all frequently used words
are replaced with 8086 assembly code definitions in hForth EXE model.
Comparison with other 8086 Forth systems can be found in Mr. Borasky's
article "Forth in the HP100LX" <I>Forth Dimensions</I> XVII/4, 6.</P>

<P>hForth models are highly extensible. Optional word set words as well
as an assembler can be added on top of basic hForth system. Complete
Tools, Search Order, Search Order Ext word set words and other optional
Standard words are defined in <I>OPTIONAL.F</I> included in 8086 hForth
package. 8086 Forth assembler is provided in <I>ASM8086.F</I>. Many of
Core Ext word set words are provided in <I>OPTIONAL.F</I> and all the
other Core Ext words except obsolescent ones and <CODE>[COMPILE]</CODE>
(for which <CODE>POSTPONE</CODE> should be used) are provided in
<I>COREEXT.F</I>. Complete Double and Double Ext word set words are
provided in <I>DOUBLE.F</I>. High level definitions in these files should
work in hForth for other CPUs. These files are loaded into 8086 hForth
for MS-DOS machines through keyboard redirection function of MS-DOS.
Complete Block, Block Ext, File and File Ext word set words are provided
in <I>MSDOS.F</I> using MS-DOS file handle functions. Other utilities are
also included in 8086 hForth package. <I>LOG.F</I> is to capture screen
output to an MS-DOS text file, which is edited to make Forth text source.
<I>DOSEXEC.F</I> is to call MS-DOS executables within hForth system. A
user can call familiar text editor, edit Forth text source, exit the
editor, load the source and debug without leaving hForth environment.
This process can be repeated without saturating address spaces if a
<CODE>MARKER</CODE> word is defined in the beginning of the Forth text
source and called before reload the source.</P>

<H2>Multitasker</H2>

<P>I had a chance to look at Mr. Muench's eForth 2.4.2. The multitasker
is the most elegant one among those that I have seen. It does task
switching through only two high-level words. I immediately adapted it to
hForth. Mr. Muench's multitasker is now included in P21Forth for MuP21
processor.</P>

<P>In Forth multitasker each task has its own context: data stack, return
stack and its own variables (traditionally called user variables). The
contexts must be stored and restored properly when tasks are suspended
and resumed. In Mr. Muench's multitasker <CODE>PAUSE</CODE> saves current
task's context and <CODE>wake</CODE> restores next task's context.
<CODE>PAUSE</CODE> saves return stack pointer on data stack and data
stack pointer into a user variable <CODE>stackTop</CODE>, then jumps to
next task's <CODE>status</CODE> which is held in current task's user
variable <CODE>follower.</CODE> It is defined as:</P>

<PRE><CODE>    : PAUSE   rp@ sp@ stackTop !  follower @ &gt;R ; COMPILE-ONLY
</CODE></PRE>

<P>Advanced Forth users already know that '<CODE>&gt;R EXIT</CODE>'
causes high level jump for traditional Forth virtual machine. Each task's
user variable <CODE>status</CODE> holds <CODE>wake</CODE> and immediately
followed by user variable <CODE>follower</CODE>. Initially hForth has
only one task <CODE>SystemTask</CODE>. Its user variable
<CODE>status</CODE> and <CODE>follower</CODE> hold:</P>

<PRE>
SystemTask's   status                follower
              +------+ +-----------------------------------------+
              | wake | | absolute address of SystemTask's status |
              +------+ +-----------------------------------------+
</PRE>

<P>If <CODE>FooTask</CODE> is added, <CODE>status</CODE> and
<CODE>follwer</CODE> of the two tasks now hold:</P>

<PRE>
SystemTask's   status                follower
              +------+ +-----------------------------------------+
              | wake | | absolute address of FooTask's status    |
              +------+ +-----------------------------------------+

   FooTask's   status                follower
              +------+ +-----------------------------------------+
              | wake | | absolute address of SystemTask's status |
              +------+ +-----------------------------------------+
</PRE>

<P>Effectively current task's <CODE>PAUSE</CODE> jumps to next task's
<CODE>wake</CODE>. At this point user variables and stacks are not
switched yet. <CODE>wake</CODE> assigns the return stack item (the next
address of <CODE>status</CODE>, i.e. the address of
<CODE>follower</CODE>) into global variable <CODE>userP</CODE>, which is
used to calculate absolute address of user variables.  All user variables
cluster in front of <CODE>follower</CODE>. Now user variables are
switched. Then <CODE>wake</CODE> restores data stack pointer stored in
user variable <CODE>stackTop</CODE> (now data stack is switched) and
restores return stack pointer saved on top of data stack (now return
stack is switched). <CODE>wake</CODE> is defined as:</P>

<PRE><CODE>    : wake   R&gt; userP !  stackTop @ sp!  rp! ; COMPILE-ONLY
</CODE></PRE>

<P>What is clever here is that one item on return stack, left by
<CODE>PAUSE</CODE> and consumed by <CODE>wake</CODE>, is used to transfer
control as well as information for context switching. This multitasker is
highly portable. Not a line of multitasker code was touched when hForth
8086 RAM model was moved to Z80 processor. This is also verified by Neal
Crook when porting hForth to ARM processor. I believe that it should be
possible to port this multitasker to subroutine-threaded or native-code
Forth by redefining them in machine codes.</P>

<P>I used this multitasker to update graphics screen and make cursor
blink in <I>HIOMULTI.F</I>. Console output is redirected to graphics
screen to display Korean and English characters for VGA and Hercules
Graphics Adapters. <CODE>EMIT</CODE> fills characters into a buffer and a
background task displays them on graphics screen when hForth is waiting
for keyboard input. Scrolling text on graphics screen is as fast as on
text screen. I also used the multitasker for serial communication in
<I>SIO.F</I>. Main routine fetches characters from input buffer and
stores characters in output buffer while background task does actual
hardware control.</P>

<H2>Jump table interpreter</H2>

<P>I applied all the best ideas and tricks I know to hForth. Most of them
came from other people while I added a few of my own. I believe that some
of them are worth to mention.</P>

<P>hForth text interpreter uses vector table to determine what to do with
a parsed strings after search it in the Forth dictionary. Dictionary
search results the string and 0 (for an unknown word); xt and -1 (for
non-immediate word); or xt and 1 (for immediate word) on data stack.
hForth text interpreter chooses next action by the following code:</P>

<PRE><CODE>    1+ 2* STATE @ 1+ + CELLS 'doWord + @ EXECUTE
</CODE></PRE>

<P><CODE>'doWord</CODE> table consists of six vectors.</P>

<PRE>
                               compilation state   interpretation state
                               (STATE returns -1)   (STATE returns 0)
                               ------------------  --------------------
non-immediate word (TOS = -1)     optiCOMPILE,         EXECUTE
unknown word       (TOS =  0)      doubleAlso,        doubleAlso
immediate word     (TOS =  1)       EXECUTE            EXECUTE

TOS = top-of-stack
</PRE>

<P>The behavior of the hForth text interpreter can be interactively
changed by replacing these vectors. For example, one can make hForth
interpreter accept only single-cell numbers by replacing
<CODE>doubleAlso,</CODE> and <CODE>doubleAlso</CODE> with
<CODE>singleOnly,</CODE> and <CODE>singleOnly</CODE> respectively.
<CODE>optiCOMPILE,</CODE> does the same thing as Standard word
<CODE>COMPILE,</CODE> except that it removes one level of
<CODE>EXIT</CODE> if possible. <CODE>optiCOMPILE, </CODE> does not
compile null definition <CODE>CHARS</CODE> into the current definition.
Also it compiles <CODE>2*</CODE> instead of <CODE>CELLS</CODE> if
<CODE>CELLS</CODE> is defined as "<CODE>: CELLS 2* ;</CODE>".</P>

<H2>Special compilation action for default compilation semantics</H2>

<P>Compiling words created by <CODE>CONSTANT</CODE>,
<CODE>VARIABLE</CODE>, and <CODE>CREATE</CODE> as literal values can
increase execution speed, especially for native-code Forth compilers. A
solution is implemented in hForth EXE model to provide special
compilation action for default compilation semantics. Words created by
<CODE>CONSTANT</CODE>, <CODE>VARIABLE</CODE>, and <CODE>CREATE</CODE>
have a special mark and xt for special compilation action. hForth
compiler executes the xt if it sees the mark. (<CODE>POSTPONE</CODE> must
find this special compilation action also and compile it.) A new data
structure with special compilation action can be built by
<CODE>CREATE</CODE> and only two non-Standard words:
implementation-dependent <CODE>doCompiles&gt;</CODE> and
implementation-independent <CODE>compiles&gt;</CODE>.
<CODE>doCompiles&gt;</CODE> verifies whether the last definition is ready
for special compilation action and takes an xt on data stack and assign
it as special compilation action of the last definition.
<CODE>compiles&gt;</CODE> is defined as:</P>

<PRE><CODE>    : compiles&gt;  ( xt -- )
        POSTPONE LITERAL POSTPONE doCompiles&gt; ; IMMEDIATE
</CODE></PRE>

<P>For example, <CODE>2CONSTANT</CODE> can be defined as:</P>

<PRE><CODE>    :NONAME   EXECUTE POSTPONE 2LITERAL ;
    : 2CONSTANT
        CREATE SWAP , , compiles&gt; DOES&gt; DUP @ SWAP CELL+ @ ;
</CODE></PRE>

</CODE><P>It is the user's responsibility to match special compilation
action with the default compilation semantics. I believe that this
solution is general enough to be applied to other Forth systems.</P>

<H2>Turtle Graphics</H2>

I implemented LOGO's Turtle Graphics in hForth. The turtle moves on VGA
or Hercules graphics screen and follows postfix Forth command '<CODE>100
FORWARD</CODE>' instead of prefix LOGO command '<CODE>FORWARD
100</CODE>'. No floating-point math is used at all. Integers are used
represent angles in degree rather than in radian and look-up table is
used to evaluate trigonometric functions. Only a few words are defined in
machine code for line drawing and trigonometric function evaluation. The
turtle moves swiftly on a 286 machine. The Forth source and MS-DOS
executables, <I>TURTLE.F</I>, <I>ETURTLE.EXE</I> (using English commands)
and <I>HTURTLE.EXE </I>(using Korean commands), are included.</P>

<H2>Summary</H2>

<P>hForth is a small ANS Forth system based on eForth. It is especially
designed for small embedded system. The basic ROM and RAM models are
designed for portability, however, can be easily optimized for a specific
CPU to build a competitive system as shown in 8086 EXE model. hForth
packages for 8086 and Z80 can be found at 
<A HREF="http://www.taygeta.com/forthcomp.html">
http://www.taygeta.com/forthcomp.html</A> or 
<A HREF="ftp://ftp.taygeta.com/pub/Forth/Reviewed/">
ftp://ftp.taygeta.com/pub/Forth/Reviewed/</A>. hForth is also ported to
H8 processor by Mr. Bernie Mentink and to ARM processor by Neal Crook.
I hope that hForth will be useful to many people.</P>

</BODY>
</HTML>
