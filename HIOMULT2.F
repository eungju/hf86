\ IBM-PC에서 쓰는 hForth 용 한글 입출력 프로그램입니다. 지금은 조합형
\ 한글만 쓸 수 있읍니다.
\
\ 이 프로그램은 VGA 그래픽 카드와 허큘레스 그래픽 카드만을 지원합니다.
\
\ 'TEXT'라고 시켜면 텍스트 화면으로 바뀌고 'HGRAPHIC'이라고 시키면 그래픽
\ 화면으로 바뀌어서 한글을 화면에 표시할 수 있읍니다.
\
\ 처음에는 두벌식 자판으로 설정되어 있읍니다. 3벌식 자판으로 바꾸려면
\ '3BUL'이라고 시키고 2벌식 자판으로 바꾸려면 '2BUL'이라고 시키십시오.
\
\ 글꼴을 바꾸려면 아래처럼 ENGFONT-LOADED와 HANFONT-LOADED를 쓰십시오.
\
\     BL PARSE ENG.FNT ENGFONT-LOADED
\     BL PARSE HAN.FNT HANFONT-LOADED
\
\ 크기가 11008이나 11520 바이트인 8벌X4벌X4벌 글꼴을 쓸 수 있읍니다.
\
\ HF86EXE.EXE를 시작한 후 다음 순서로 이 프로그램을 올릴 수 있읍니다.
\
\	<< OPTIONAL.F
\	<< ASM8086.F
\	<< COREEXT.F
\	<< MSDOS.F
\	BL PARSE MULTI.F    INCLUDED
\	BL PARSE HIOMULT2.F INCLUDED
\
\ 1996. 2. 9.
\ Wonyong Koh
\
\ Usage:
\   TEXT  ( -- )
\	Set text screen and redirect i/o vectors to DOS functions.
\   HGRAPHIC  ( -- )
\	Set graphics screen and redirect i/o vectors to handle Korean
\	character input and graphics screen output.
\   ENGFONT-LOADED  ( c-addr u -- )
\	Load English font file 'c-addr u' of which size is 4096 bytes.

CHAR " PARSE FILE" ENVIRONMENT? 0= [IF] 0 [THEN]
0= [IF]
    CR .( This program needs FILE wordset words.) ABORT
[THEN]

BASE @
GET-ORDER  GET-CURRENT

FORTH-WORDLIST SET-CURRENT
WORDLIST WORDLIST-NAME 한글입출력-WORDLIST
한글입출력-WORDLIST SET-CURRENT
GET-ORDER 한글입출력-WORDLIST SWAP 1+ SET-ORDER

CR .( Loading character font data)
DECIMAL
CREATE ENGFONT	    \ 8x16, 128 자
16 128 * ALLOT

CREATE HANFONT	    \ 16x16, 19 자 x 8 벌 + 21 자 X 4 벌 + 27 자 X 4 벌
11008 ALLOT
HANFONT CONSTANT 초성글꼴
초성글꼴 32 19 * 8 * + CONSTANT 중성글꼴
중성글꼴 32 21 * 4 * + CONSTANT 받침글꼴

NONSTANDARD-WORDLIST SET-CURRENT
: ENGFONT-LOADED  ( c_addr u -- )
    R/O OPEN-FILE THROW 				    \ fileid
    DUP ENGFONT [ 16 128 * ] LITERAL ROT READ-FILE THROW    \ fileid n
    [ 16 128 * ] LITERAL <> IF
	." 영문글꼴 파일에 글꼴값이 모자랍니다." CR
	ABORT" Not enough font data in English font file." THEN
    CLOSE-FILE THROW ;

: HANFONT-LOADED ( c_addr u -- )
    R/O OPEN-FILE THROW 	\ fileid
    DUP FILE-SIZE THROW 	\ fileid ud
    IF	." 모르는 한글글꼴 파일입니다 - 파일이 너무 큽니다." CR
	ABORT" Unknown type of Korean font file - file too big." THEN
    \ fileid u
    CASE
      11008 OF DUP 초성글꼴 11008 ROT READ-FILE THROW DROP ENDOF
      11520 OF
	8 0 DO DUP DUP FILE-POSITION THROW 32 S>D D+ ROT REPOSITION-FILE THROW
	       DUP 초성글꼴 [ 19 32 * ] LITERAL I * + [ 19 32 * ] LITERAL
	       ROT READ-FILE THROW DROP LOOP
	4 0 DO DUP DUP FILE-POSITION THROW 32 S>D D+ ROT REPOSITION-FILE THROW
	       DUP 중성글꼴 [ 21 32 * ] LITERAL I * + [ 21 32 * ] LITERAL
	       ROT READ-FILE THROW DROP LOOP
	4 0 DO DUP DUP FILE-POSITION THROW 32 S>D D+ ROT REPOSITION-FILE THROW
	       DUP 받침글꼴 [ 27 32 * ] LITERAL I * + [ 27 32 * ] LITERAL
	       ROT READ-FILE THROW DROP LOOP
	ENDOF
      DROP ." 모르는 한글글꼴 파일입니다." CR
	   ABORT" Unknown type of Korean font file."
    ENDCASE
    CLOSE-FILE THROW ;

BL PARSE ENG.FNT ENGFONT-LOADED
BL PARSE HAN.FNT HANFONT-LOADED

한글입출력-WORDLIST SET-CURRENT

\
\ 한글 출력 낱말
\
CR .( Loading character output words)

DECIMAL 80 CONSTANT MAX-X
VARIABLE VIR_X
VARIABLE VIR_Y

HEX
: BINARY   2 BASE ! ;
: 16* ( n -- 16*n )   2* 2* 2* 2* ;
: 뒷쇠= ( char -- 0|-1 )   DUP 08 = OVER 07F = OR SWAP 0FF = OR ;

CODE INT10  ( AX -- AX )
    BX AX MOV,		\ BX가 더미의 맨 위 값입니다.
    10 INT,		\ AH = 0
    AX BX MOV,
    NEXT,
END-CODE

: GET-MODE ( -- mode )
    0F00 INT10 0FF AND ;

3 VALUE OldMode#

: SET-MODE  ( mode -- )   INT10 DROP ;

: VGA?	( -- flag )   1A00 INT10 0FF AND 1A = ;

0 VALUE GRAPHIC?
3 VALUE textmode#

\ for VGA graphics card
DECIMAL 30 VALUE MAX-Y			\ 640X480 해상도; 480 / 16 = 30 줄
HEX

: VGA-SET-GRAPHIC  ( -- )   11 SET-MODE  -1 TO GRAPHIC? ;

\ VGA 비디오 메모리의 각 줄에 대한 세그먼트 주소의 표를 만듦
\ Y 좌표로 이 세그먼트 값을 얻으면 X 좌표를 바로
\ 오프셋 주소로 쓸 수 있읍니다.
CREATE VGA-Y>SegTable MAX-Y 16* CELLS ALLOT

MARKER ~TEMP
:NONAME
   MAX-Y 16* 0 DO  0A000  I 5 *  +  VGA-Y>SegTable I CELLS + !	LOOP ;
EXECUTE
~TEMP	\ 표를 채우고 위 낱말을 지움

\ for Hercules monochrome grahics card
DECIMAL 25 TO MAX-Y			\ 640X400 해상도; 400 / 16 = 25 줄
HEX

CREATE 6854REGS 	\ 640X400 해상도에 필요한 6845 레지스터 초기값
31 C, 28 C, 29 C, 08 C, 68 C, 02 C, 64 C, 65 C, 02 C, 03 C,

: HERC?  ( -- flag )
    03B5 PC@  4F DUP  03B5 PC!	100 0 DO LOOP
    03B5 PC@  ROT  03B5 PC!  = IF
	03BA PC@ 80 AND
	8000 0 DO 03BA PC@ 80 AND OVER <> IF UNLOOP DROP TRUE EXIT THEN LOOP
    THEN FALSE ;

: HERC-SET-GRAPHIC  ( -- )
   0A 0 DO I 03B4 PC! 6854REGS I + C@ 03B5 PC! LOOP
   1 03BF PC!		\ 그래픽 모드를 허용, 그래픽 페이지 1 은 사용 불가능
   [ BINARY ] 00001010 [ HEX ]
   03B8 PC!		\ 그래픽 페이지 0 을 그래픽 모드로 표시
   -1 TO GRAPHIC? ;

\ 허큘레스 비디오 메모리의 각 줄에 대한 세그먼트 주소의 표를 만듦
\ 그래픽 페이지 1은 0B000:0h에서 시작
\ Y 좌표로 이 세그먼트 값을 얻으면 X 좌표를 바로
\ 오프셋 주소로 쓸 수 있읍니다.
CREATE HERC-Y>SegTable MAX-Y 16* CELLS ALLOT

MARKER ~TEMP
:NONAME
   MAX-Y 16* 0 DO 0B000  I 4 MOD 200 *	+  I 4 /  5 *  +
		  HERC-Y>SegTable I CELLS + !		   LOOP ;
EXECUTE
~TEMP	\ 표를 채우고 위 낱말을 지움

VARIABLE Y>SegTable
: Y>SEG  ( y -- segment_addr )
    CELLS Y>SegTable @ + @ ;

' VGA-SET-GRAPHIC VALUE 'SET-GRAPHIC

NONSTANDARD-WORDLIST SET-CURRENT
: SET-GRAPHIC  ( -- )	'SET-GRAPHIC EXECUTE ;
한글입출력-WORDLIST SET-CURRENT

DECIMAL

\ 텍스트 Y 좌표의 화면에 표시된 문자들을 바로 위 줄로 옮김
\ 그래픽 좌표로는 16y 부터 16 가로줄을 각각 16 줄 위로 옮김
\ : UP-LINE
\    16* DUP 16 - DO
\      I 16 + Y>SEG  I Y>SEG
\      40 0 DO OVER I 2* L@  OVER I 2* L! LOOP	2DROP
\    LOOP ;

CODE UP-LINE  ( y -- )
   SI PUSH,
   BX DEC,
   5 # CL MOV,
   BX CL SHL,			\ BX = (VIR_Y@-1)@ * 32
   Y>SegTable ) BX ADD,
   16 # DX MOV,
1 L:
   SI SI XOR,
   DI DI XOR,
   SS:	0 [BX] ES MOV,
   SS: 32 [BX] DS MOV,
   40 # CX MOV,
   REPE, WORD MOVS,
   2 # BX ADD,
   DX DEC,
   1 L# JNE,
   SS AX MOV,
   AX DS MOV,
   SI POP,
   BX POP,
   NEXT,
END-CODE

\ 텍스트 Y 좌표의 줄을 지움
\ : CLEAR-LINE
\    16* DUP 16 + SWAP
\    DO I Y>SEG
\	40 0 DO 0 OVER I 2* L! LOOP  DROP
\    LOOP ;

CODE CLEAR-LINE  ( y -- )
   5 # CL MOV,
   BX CL SHL,			\ BX = VIR_Y@ * 32
   Y>SegTable ) BX ADD,
   AX AX XOR,
   16 # DX MOV,
1 L:
   0 [BX] ES MOV,
   DI DI XOR,
   40 # CX MOV,
   REPE,
   WORD STOS,
   2 # BX ADD,
   DX DEC,
   1 L# JNE,
   BX POP,
   NEXT,
END-CODE

HEX
VARIABLE VSCR0
VARIABLE YY
VARIABLE XX
1000 CONSTANT VSCREEN-SIZE
0FFF CONSTANT VSCR-MASK
CREATE VSCREEN VSCREEN-SIZE CHARS ALLOT
: >VSCR-ADDR   ( offset -- c_addr )
    VSCR0 @ + VSCR-MASK AND VSCREEN + ;

DECIMAL

\ : EFONT!  ( x y char -- )
\    16* ENGFONT +	  \ x y font-addr
\    SWAP 16*		  \ x font-addr 16y
\    16 0 DO OVER I + C@ OVER I + Y>SEG 4 PICK LC! LOOP DROP 2DROP ;

CODE EFONT!  ( x y char -- )
   SI DX MOV,		\ MOV	DX,SI
   BX SI MOV,		\ MOV	SI,BX
   BX POP,		\ POP	BX
   DI POP,		\ POP	DI
   4 # CL MOV,		\ MOV	CL,#4
   SI CL SHL,		\ SHL	SI,CL
   ENGFONT # SI ADD,	\ ADD	SI,ENGFONT	; SI = font-addr
   CL INC,		\ INC	CL		; CL = 5
   BX CL SHL,		\ SHL	BX,CL		; BX = VIR_Y@ * 32
   Y>SegTable ) BX ADD,
   2 # CX MOV,
 15
   0 [BX] ES MOV, BYTE LODS, ES: AL 0 [DI] MOV, CX BX ADD, 1- ?DUP [IF] 0 >IN ! [THEN]
   0 [BX] ES MOV, BYTE LODS, ES: AL 0 [DI] MOV,
   DX SI MOV,
   BX POP,
   NEXT,
END-CODE

HEX
CREATE 채움글꼴
00000 , 00000 , 00000 , 00000 , 00000 , 00000 , 00000 , 00000 , \ 채움
00000 , 00000 , 00000 , 00000 , 00000 , 00000 , 00000 , 00000 ,

CREATE 그림자글꼴
05555 , 0AAAA , 05555 , 0AAAA , 05555 , 0AAAA , 05555 , 0AAAA , \ 쓰지 않음
05555 , 0AAAA , 05555 , 0AAAA , 05555 , 0AAAA , 05555 , 0AAAA ,

BINARY
00001 CONSTANT 채움초성
00010 CONSTANT 채움중성
00001 CONSTANT 채움받침
1000010001000001 CONSTANT 채움자	\ 초성, 중성, 받침 모두 채움자
0111110000000000 CONSTANT 초성본
0000001111100000 CONSTANT 중성본
0000000000011111 CONSTANT 받침본
1000001111111111 CONSTANT 초성지움본
1111110000011111 CONSTANT 중성지움본
1111111111100000 CONSTANT 받침지움본
DECIMAL

VARIABLE HCHAR

\ VARIABLE H1FONT
\ VARIABLE H2FONT
\ VARIABLE H3FONT
\ : Y>SEG  ( y -- segment )   CELLS Y>SegTable @ + @ ;
\ : H2FONT!  ( x y 초성글꼴값 중성글꼴값 -- )
\     H2FONT !
\     H1FONT !
\     16*
\     16 0 DO H1FONT @ @
\	      H2FONT @ @ OR
\	      OVER I + Y>SEG 3 PICK L!
\	      2 H1FONT +!  2 H2FONT +!
\	   LOOP  2DROP ;
\
\ : H3FONT!  ( x y 초성글꼴값 중성글꼴값 받침글꼴값 -- )
\     H3FONT !
\     H2FONT !
\     H1FONT !
\     16*
\     16 0 DO H1FONT @ @
\	      H2FONT @ @ OR
\	      H3FONT @ @ OR
\	      OVER I + Y>SEG 3 PICK L!
\	      2 H1FONT +!  2 H2FONT +!	2 H3FONT +!
\	   LOOP  2DROP ;

\ 조합형코드를 빈 자리 없는 글꼴 코드값으로 바꿈
\ '컴퓨터 속의 한글' 이준희, 정내권 지음, 정보시대 (1991) 122-134쪽 참조
\ 채움자는 32를, 유효하지 않은 코드는 96(=32+64)을 더미에 올림

CREATE 초성글꼴코드표  ( 조합형초성코드 -- 초성글꼴코드 )
    96 C, 32 C,  0 C,  1 C,  2 C,  3 C,  4 C,  5 C,
     6 C,  7 C,  8 C,  9 C, 10 C, 11 C, 12 C, 13 C,
    14 C, 15 C, 16 C, 17 C, 18 C, 96 C, 96 C, 96 C,
    96 C, 96 C, 96 C, 96 C, 96 C, 96 C, 96 C, 96 C, ALIGN

CREATE 중성글꼴코드표  ( 조합형중성코드 -- 중성글꼴코드 )
    96 C, 96 C, 32 C,  0 C,  1 C,  2 C,  3 C,  4 C,
    96 C, 96 C,  5 C,  6 C,  7 C,  8 C,  9 C, 10 C,
    96 C, 96 C, 11 C, 12 C, 13 C, 14 C, 15 C, 16 C,
    96 C, 96 C, 17 C, 18 C, 19 C, 20 C, 96 C, 96 C, ALIGN

CREATE 받침글꼴코드표  ( 조합형받침코드 -- 받침글꼴코드 )
    96 C, 32 C,  0 C,  1 C,  2 C,  3 C,  4 C,  5 C,
     6 C,  7 C,  8 C,  9 C, 10 C, 11 C, 12 C, 13 C,
    14 C, 15 C, 96 C, 16 C, 17 C, 18 C, 19 C, 20 C,
    21 C, 22 C, 23 C, 24 C, 25 C, 26 C, 96 C, 96 C, ALIGN

19 VALUE 코드수
: *,   코드수 * , ;

CREATE 받침없는초성글꼴벌밑  ( 중성글꼴코드 -- 초성글꼴벌 )
    \ ㅏ   ㅐ	ㅑ   ㅒ   ㅓ   ㅔ   ㅕ	 ㅖ   ㅗ   ㅘ	ㅙ
       0 *, 0 *, 0 *, 0 *, 0 *, 0 *, 0 *, 0 *, 1 *, 3 *, 3 *,
    \ ㅚ   ㅛ	ㅜ   ㅝ   ㅞ   ㅟ   ㅠ	 ㅡ   ㅢ   ㅣ
       3 *, 1 *, 2 *, 4 *, 4 *, 4 *, 2 *, 1 *, 3 *, 0 *,

21 TO 코드수
CREATE 받침없는중성글꼴벌밑  ( 초성글꼴코드 -- 중성글꼴벌 )
    \ ㄱ   ㄲ	ㄴ   ㄷ   ㄸ   ㄹ   ㅁ	 ㅂ   ㅃ   ㅅ
      0 *, 1 *, 1 *, 1 *, 1 *, 1 *, 1 *, 1 *, 1 *, 1 *,
    \ ㅆ   ㅇ	ㅈ   ㅉ   ㅊ   ㅋ   ㅌ	 ㅍ   ㅎ
      1 *, 1 *, 1 *, 1 *, 1 *, 0 *, 1 *, 1 *, 1 *,

19 TO 코드수
CREATE 받침있는초성글꼴벌밑  ( 중성글꼴코드 -- 초성글꼴벌 )
    \ ㅏ   ㅐ	ㅑ   ㅒ   ㅓ   ㅔ   ㅕ	 ㅖ   ㅗ   ㅘ	ㅙ
       5 *, 5 *, 5 *, 5 *, 5 *, 5 *, 5 *, 5 *, 6 *, 7 *, 7 *,
    \ ㅚ   ㅛ	ㅜ   ㅝ   ㅞ   ㅟ   ㅠ	 ㅡ   ㅢ   ㅣ
       7 *, 6 *, 6 *, 7 *, 7 *, 7 *, 6 *, 6 *, 7 *, 5 *,

21 TO 코드수
CREATE 받침있는중성글꼴벌밑  ( 초성글꼴코드 -- 중성글꼴벌 )
    \ ㄱ   ㄲ	ㄴ   ㄷ   ㄸ   ㄹ   ㅁ	 ㅂ   ㅃ   ㅅ
      2 *, 3 *, 3 *, 3 *, 3 *, 3 *, 3 *, 3 *, 3 *, 3 *,
    \ ㅆ   ㅇ	ㅈ   ㅉ   ㅊ   ㅋ   ㅌ	 ㅍ   ㅎ
      3 *, 3 *, 3 *, 3 *, 3 *, 2 *, 3 *, 3 *, 3 *,

27 TO 코드수
CREATE 받침글꼴벌밑  ( 중성글꼴코드 -- 받침글꼴벌 )
    \ ㅏ   ㅐ	ㅑ   ㅒ   ㅓ   ㅔ   ㅕ	 ㅖ   ㅗ   ㅘ	ㅙ
       0 *, 2 *, 0 *, 2 *, 1 *, 2 *, 1 *, 2 *, 3 *, 0 *, 2 *,
    \ ㅚ   ㅛ	ㅜ   ㅝ   ㅞ   ㅟ   ㅠ	 ㅡ   ㅢ   ㅣ
       1 *, 3 *, 3 *, 1 *, 2 *, 1 *, 3 *, 3 *, 1 *, 1 *,

\ : CCFONT!  ( x y 받침없는16비트한글코드 -- )
\     DUP 초성본 AND 10 RSHIFT CHARS
\     초성글꼴코드표 + C@ SWAP		  \ x y 초성글꼴코드 한글코드
\     중성본 AND 5 RSHIFT CHARS
\     중성글꼴코드표 + C@		  \ x y 초성글꼴코드 중성글꼴코드
\     2DUP OVER 31 > IF
\	  DROP 63 > IF 그림자글꼴 ELSE 채움글꼴 THEN
\     ELSE DUP 31 > IF DROP 0 THEN
\	  CELLS 받침없는초성글꼴벌밑 + @ + 5 LSHIFT 초성글꼴 +	    THEN
\     ROT ROT DUP 31 > IF NIP 63 > IF 그림자글꼴 ELSE 채움글꼴 THEN
\     ELSE SWAP DUP 31 > IF DROP 0 THEN
\	  CELLS 받침없는중성글꼴벌밑 + @ + 5 LSHIFT 중성글꼴 +	    THEN
\     H2FONT! ;

CODE CCFONT!  ( x y 받침없는16비트한글코드 -- )
    CX POP,
    DX POP,
    BP PUSH,
    SI PUSH,
    DX PUSH,
    CX PUSH,
    BX SI MOV,				\ SI = 한글코드
    초성본 # BX AND,
    10 # CL MOV,
    BX CL SHR,
    초성글꼴코드표 [BX] BL MOV,
    BX AX MOV,				\ AX = 초성글꼴코드표
    SI BX MOV,
    중성본 # BX AND,
    5 # CL MOV,
    BX CL SHR,
    중성글꼴코드표 [BX] BL MOV,
    BX DX MOV,				\ DX = 중성글꼴코드표
xhere ( HFONT!에서 뛰어올 주소를 더미에 남김)
    BINARY 00100000 DECIMAL # AL TEST,
    1 L# JZ,
    \ AX(=초성)가 채움자이거나 무효글꼴이면
    채움글꼴 # SI MOV,
    BINARY 01000000 DECIMAL # AL TEST,
    2 L# JZ,
    그림자글꼴 # SI MOV,
    2 L# JU,
1 L:
    BX BX XOR,
    BINARY 00100000 DECIMAL # DL TEST,
    3 L# JNZ,
    DX BX MOV,
    BX 1 SHL,
3 L:
    받침없는초성글꼴벌밑 [BX] SI MOV,
    AX SI ADD,
    5 # CL MOV,
    SI CL SHL,
    초성글꼴 # SI ADD,
2 L:	\ SI = 초성글꼴주소
    BINARY 00100000 DECIMAL # DL TEST,
    4 L# JZ,
    \ DX(=중성)가 채움자이거나 무효글꼴이면
    채움글꼴 # DI MOV,
    BINARY 01000000 DECIMAL # DL TEST,
    5 L# JZ,
    그림자글꼴 # DI MOV,
    5 L# JU,
4 L:
    BX BX XOR,
    BINARY 00100000 DECIMAL # AL TEST,
    6 L# JNZ,
    AX BX MOV,
    BX 1 SHL,
6 L:
    받침없는중성글꼴벌밑 [BX] DI MOV,
    DX DI ADD,
    5 # CL MOV,
    DI CL SHL,
    중성글꼴 # DI ADD,
5 L:	\ DI = 중성글꼴주소
    BX POP,			\ BX = y
    DX POP,			\ DX = x
    5 # CL MOV,
    BX CL SHL,			\ BX = y * 32
    Y>SegTable ) BX ADD,
    2 # CX MOV,
  15
    WORD LODS, 0 [DI] AX OR, 0 [BX] ES MOV, BX DX XCHG, ES: AX 0 [BX] MOV, BX DX XCHG, CX DI ADD, CX BX ADD, 1- ?DUP [IF] 0 >IN ! [THEN]
    WORD LODS, 0 [DI] AX OR, 0 [BX] ES MOV, BX DX XCHG, ES: AX 0 [BX] MOV,
    SI POP,
    BP POP,
    BX POP,
    NEXT,
END-CODE

\ : CCCFONT!  ( x y 받침있는16비트한글코드 -- )
\     DUP 초성본 AND 10 RSHIFT CHARS
\     초성글꼴코드표 + C@ SWAP	    \ x y 초성글꼴코드 한글코드
\     DUP 중성본 AND 5 RSHIFT CHARS
\     중성글꼴코드표 + C@ SWAP	    \ x y 초성글꼴코드 중성글꼴코드 한글코드
\     받침본 AND CHARS
\     받침글꼴코드표 + C@	    \ x y 초성글꼴코드 중성글꼴코드 받침글꼴코드
\     DUP 31 > IF 63 > IF 그림자글꼴 ELSE 채움글꼴 THEN
\     ELSE OVER DUP 31 > IF DROP 0 THEN
\	   CELLS 받침글꼴벌밑 + @ + 5 LSHIFT 받침글꼴 + THEN
\     ROT ROT
\     2DUP OVER 31 > IF DROP 63 > IF 그림자글꼴 ELSE 채움글꼴 THEN
\     ELSE DUP 31 > IF DROP 0 THEN
\	   CELLS 받침있는초성글꼴벌밑 + @ + 5 LSHIFT 초성글꼴 +     THEN
\     ROT ROT DUP 31 > IF NIP 63 > IF 그림자글꼴 ELSE 채움글꼴 THEN
\     ELSE SWAP DUP 31 > IF DROP 0 THEN
\	   CELLS 받침있는중성글꼴벌밑 + @ + 5 LSHIFT 중성글꼴 +     THEN
\     H3FONT! ;

\ : HFONT!  ( x y 16비트한글코드 -- )
\     DUP 받침본 AND 1 = IF CCFONT! ELSE CCCFONT! THEN ;

CODE HFONT!  ( x y 16비트한글코드 -- )
    CX POP,
    DX POP,
    BP PUSH,
    SI PUSH,
    DX PUSH,
    CX PUSH,
    BX SI MOV,				\ SI = 한글코드
    초성본 # BX AND,
    10 # CL MOV,
    BX CL SHR,
    초성글꼴코드표 [BX] BL MOV,
    BX AX MOV,				\ AX = 초성글꼴코드표
    SI BX MOV,
    중성본 # BX AND,
    5 # CL MOV,
    BX CL SHR,
    중성글꼴코드표 [BX] BL MOV,
    BX DX MOV,				\ DX = 중성글꼴코드표
    SI BX MOV,
    받침본 # BX AND,
    1 # BX CMP,
    0 L# JNZ,
    ( CCFONT! 정의 안에서 남긴 주소) # JMP,
0 L:
    받침글꼴코드표 [BX] BL MOV,
    BX CX MOV,				\ CX = 받침글꼴코드표
    BINARY 00100000 DECIMAL # CL TEST,
    1 L# JZ,
    \ CX(=받침)가 채움자이거나 무효글꼴이면
    채움글꼴 # BP MOV,
    BINARY 01000000 DECIMAL # CL TEST,
    2 L# JZ,
    그림자글꼴 # BP MOV,
    2 L# JU,
1 L:
    BX BX XOR,
    BINARY 00100000 DECIMAL # DL TEST,
    3 L# JNZ,
    DX BX MOV,
    BX 1 SHL,
3 L:
    받침글꼴벌밑 [BX] BP MOV,
    CX BP ADD,
    5 # CL MOV,
    BP CL SHL,
    받침글꼴 # BP ADD,
2 L:	\ BP = 받침글꼴주소
    BINARY 00100000 DECIMAL # AL TEST,
    4 L# JZ,
    \ AX(=초성)가 채움자이거나 무효글꼴이면
    채움글꼴 # SI MOV,
    BINARY 01000000 DECIMAL # AL TEST,
    5 L# JZ,
    그림자글꼴 # SI MOV,
    5 L# JU,
4 L:
    BX BX XOR,
    BINARY 00100000 DECIMAL # DL TEST,
    6 L# JNZ,
    DX BX MOV,
    BX 1 SHL,
6 L:
    받침있는초성글꼴벌밑 [BX] SI MOV,
    AX SI ADD,
    5 # CL MOV,
    SI CL SHL,
    초성글꼴 # SI ADD,
5 L:	\ SI = 초성글꼴주소
    BINARY 00100000 DECIMAL # DL TEST,
    7 L# JZ,
    \ DX(=중성)가 채움자이거나 무효글꼴이면
    채움글꼴 # DI MOV,
    BINARY 01000000 DECIMAL # DL TEST,
    8 L# JZ,
    그림자글꼴 # DI MOV,
    8 L# JU,
7 L:
    BX BX XOR,
    BINARY 00100000 DECIMAL # AL TEST,
    9 L# JNZ,
    AX BX MOV,
    BX 1 SHL,
9 L:
    받침있는중성글꼴벌밑 [BX] DI MOV,
    DX DI ADD,
    5 # CL MOV,
    DI CL SHL,
    중성글꼴 # DI ADD,
8 L:	\ DI = 중성글꼴주소
    BX POP,			\ BX = y
    DX POP,			\ DX = x
    5 # CL MOV,
    BX CL SHL,			\ BX = y * 32
    Y>SegTable ) BX ADD,
    2 # CX MOV,
  15
    WORD LODS, 0 [DI] AX OR, 0 [BP] AX OR, 0 [BX] ES MOV, BX DX XCHG, ES: AX 0 [BX] MOV, BX DX XCHG, CX DI ADD, CX BP ADD, CX BX ADD, 1- ?DUP [IF] 0 >IN ! [THEN]
    WORD LODS, 0 [DI] AX OR, 0 [BP] AX OR, 0 [BX] ES MOV, BX DX XCHG, ES: AX 0 [BX] MOV,
    SI POP,
    BP POP,
    BX POP,
    NEXT,
END-CODE

: xySTR!  ( x y c_addr u -- )
    BEGIN >R >R 2DUP R@ C@
	  DUP 128 < IF EFONT!
	  ELSE 8 LSHIFT R> CHAR+ DUP >R C@ OR HFONT! SWAP 1+ SWAP
	  THEN
	  SWAP 1+ SWAP R> CHAR+ R> 1- DUP 0=
    UNTIL 2DROP 2DROP ;

DECIMAL 30 TO MAX-Y

CREATE MAX-X*Table MAX-Y 1+ CELLS ALLOT
MARKER ~TEMP
:NONAME   MAX-Y 1+ 0 DO I MAX-X *  MAX-X*Table I CELLS +  !  LOOP ; EXECUTE
~TEMP
: MAX-X*  ( y -- MAX_X*y )   CELLS MAX-X*Table + @ ;

HEX
: SHOW-LINE  ( y -- )		\ 가상화면의 y 줄을 그래픽 화면에 표시
    >R 1 MAX-X* 0				\ max-x 0  R: y
    BEGIN
       DUP R@ OVER >VSCR-ADDR DUP C@		\ max-x x x 0 c_addr char
       DUP 80 < IF NIP EFONT!
       ELSE 8 LSHIFT
	    SWAP CHAR+ C@ OR HFONT! CHAR+ THEN
       CHAR+ 2DUP =
    UNTIL 2DROP R> DROP ;

0 VALUE YTop

: SCROLL  ( -- )
    MAX-Y MAX-X* DUP MAX-X + SWAP
    DO BL I >VSCR-ADDR C! LOOP
    MAX-Y 1-  MAX-X 0 DO I OVER BL EFONT! LOOP DROP
    VSCR0 @ MAX-X + VSCR-MASK AND VSCR0 !
    YTop SHOW-LINE
    0 XX !  YTop YY ! ;

: VIR_X+!  ( n -- )
    VIR_X @ + MAX-X /MOD VIR_Y +! VIR_X !
    VIR_Y @ MAX-Y = IF SCROLL -1 VIR_Y +! THEN ;

: VSCR!  ( char -- )   VIR_Y @ MAX-X* VIR_X @ + >VSCR-ADDR C! ;

: multiEMIT  ( char -- )
    DUP 뒷쇠= IF DROP VIR_X @ VIR_Y @ BL EFONT! -1 VIR_X +! BL VSCR! EXIT THEN
    DUP 0D ( CR) =  IF DROP  0 VIR_X !				     EXIT THEN
    DUP 0A ( LF) =  IF DROP  VIR_Y @ 1+ MAX-Y < IF 1 VIR_Y +! EXIT THEN
			     SCROLL				     EXIT THEN
    VSCR!  1 VIR_X+! ;

: HEMIT  ( char -- )
    HCHAR @ 0= IF			\ 새로 시작하는 글자
      DUP 80 < IF multiEMIT EXIT THEN	\ 한글이 아니면 그대로 출력
      VIR_X @ 1+ MAX-X = IF VIR_X @ multiEMIT BL multiEMIT THEN
      HCHAR ! EXIT			\ 첫 8 비트 반자를 갈무리
    THEN
    HCHAR @ multiEMIT  multiEMIT  0 HCHAR ! ;

\
\ 한글 입력 낱말들
\

CR .( Loading character input words)

CODE INT16h
   BX AX MOV,
   16 INT,
   AX BX MOV,
   NEXT,
END-CODE

\ 마지막 글쇠 입력 때 왼쪽 윗글쇠가 눌렸으면 참, 아니면 거짓
: 왼쪽윗쇠눌림?  ( -- flag )
	200 INT16h  [ BINARY ] 00000010 [ HEX ] AND 0= 0= ;

\ 마지막 글쇠 입력 때 CapsLock 상태였으면 참, 아니면 거짓
: CapsLock?  ( -- flag )
	200 INT16h  [ BINARY ] 01000000 [ HEX ] AND 0= 0= ;

VARIABLE 글쇠입력상태
VARIABLE 글쇠통
VARIABLE 미완성자
CREATE 글쇠입력상태기억  8 CELLS ALLOT
CREATE 미완성자기억	 8 CELLS ALLOT
VARIABLE 째입력상태
VARIABLE 째미완성자
: 앞자기억  ( -- )
    미완성자 @	째미완성자 @ 7 AND CELLS 미완성자기억 + !
    1 째미완성자 +! ;
: 상태기억  ( 상태 -- )
    째입력상태 @ 7 AND CELLS 글쇠입력상태기억 + !
    1 째입력상태 +! ;

DECIMAL
: |  ( "<spaces>name" -- )   ' , ;
: 칸 ;
: 오토마타:  ( width -- )
	CREATE , ;
: ;오토마타
	DOES>
	TUCK @				\ 주소 종류 칸수
	글쇠입력상태 @
	DUP 상태기억 앞자기억	      \ 한글글자이면
	* + 2* CELLS + CELL+
	DUP >R
	@ EXECUTE
	R> CELL+
	@ EXECUTE
	글쇠입력상태 ! ;

0 CONSTANT >0 IMMEDIATE
1 CONSTANT >1 IMMEDIATE
2 CONSTANT >2 IMMEDIATE
3 CONSTANT >3 IMMEDIATE
5 CONSTANT >5 IMMEDIATE

HEX
\ 반디가 화면 오른쪽끝에 있으면 다음행에서 입력받음
: 반디위치조정	( -- )	 VIR_X @ 1+ MAX-X = ( -1|0) NEGATE VIR_X+! ;
: 미완성자보여	 ( -- )   VIR_X @  VIR_Y @  미완성자 @	HFONT! ;
: 그냥	( -- )	 VIR_X @ VIR_Y @  BL  EFONT! ;
: 채움!  ( -- )   채움자  미완성자 !  1 상태기억  앞자기억 ;
: 미완성자초성	( -- 초성 )   미완성자 @  초성본  AND 0A RSHIFT ;
: 미완성자중성	( -- 중성 )   미완성자 @  중성본  AND 05 RSHIFT ;
: 미완성자받침	( -- 받침 )   미완성자 @  받침본  AND ;
: 입력계속  ( -- 0 )   미완성자보여 0 ;
: 낱자바꿔  ( 값 지움본 -- )   미완성자 @  AND	OR  미완성자 ! ;
: 초성바꿔  ( 초성 -- )   0A LSHIFT  초성지움본 낱자바꿔 ;
: 중성바꿔  ( 중성 -- )   05 LSHIFT  중성지움본 낱자바꿔 ;
: 받침바꿔  ( 받침 -- ) 	     받침지움본 낱자바꿔 ;
: 초성!   ( 초성 -- 0 )   반디위치조정	초성바꿔 입력계속 ;
: 중성!   ( 중성 -- 0 ) 		중성바꿔 입력계속 ;

: 완성	 (    0 -- 16비트자 )	DROP	  미완성자 @  채움! ;
: 완+ch  ( char -- 16비트자 )	글쇠통 !  미완성자 @  채움! ;
: 완+초  ( 초성 -- 16비트자 )	미완성자 @  채움!  SWAP 초성바꿔 ;
: 완+중  ( 중성 -- 16비트자 )	미완성자 @  채움!  SWAP 중성바꿔 ;

: 뒤로	( 뒷쇠 -- 0 )
    DROP -2 째미완성자 +!
    째미완성자 @ 7 AND CELLS 미완성자기억 + @  미완성자 !  입력계속 ;
: >뒤  ( -- 앞상태 )
    -2 째입력상태 +!
    째입력상태 @ 7 AND CELLS 글쇠입력상태기억 + @ ;

CREATE 초성>겹초성표  \ 겹초성을 만들수 있는 ㄱ,ㄷ,ㅂ,ㅅ,ㅈ에 대해서는 1,
		      \ 아니면 0
\ *   채움  ㄱ	 ㄲ   ㄴ   ㄷ	ㄸ   ㄹ   ㅁ   ㅂ   ㅃ
  0 C, 0 C, 1 C, 0 C, 0 C, 1 C, 0 C, 0 C, 0 C, 1 C, 0 C,
\ ㅅ   ㅆ   ㅇ	 ㅈ   ㅉ   ㅊ	ㅋ   ㅌ   ㅍ   ㅎ
  1 C, 0 C, 0 C, 1 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C,  ALIGN

CREATE 초성>받침표  \ 받침이 아닌 초성 ㄸ,ㅃ,ㅉ에 대해서는 0, 아니면 받침값
\ *   채움  ㄱ	 ㄲ   ㄴ   ㄷ	ㄸ   ㄹ   ㅁ	ㅂ    ㅃ
  0 C, 1 C, 2 C, 3 C, 5 C, 8 C, 0 C, 9 C, 11 C, 13 C, 0 C,
\ ㅅ	ㅆ    ㅇ    ㅈ	  ㅉ   ㅊ    ㅋ    ㅌ	 ㅍ    ㅎ
  15 C, 16 C, 17 C, 18 C, 0 C, 19 C, 1A C, 1B C, 1C C, 1D C,  ALIGN

CREATE 받침>홑받침초성표  \ 겹받침: 위8비트는 홑받침값, 아래8비트는 초성값
			  \ 홑받침: 위8비트는	채움값, 아래8비트는 초성값
\  *   채움  ㄱ     ㄲ	   ㄳ	  ㄴ	 ㄵ	ㄶ     ㄷ     ㄹ
   0 ,	0 , 0102 , 0103 , 020B , 0104 , 050E , 0514 , 0105 , 0107 ,
\  ㄺ	  ㄻ	 ㄼ	ㄽ     ㄾ     ㄿ     ㅀ     ㅁ	   *	ㅂ
  0902 , 0908 , 0909 , 090B , 0912 , 0913 , 0914 , 0108 ,  0 , 0109 ,
\  ㅄ	  ㅅ	 ㅆ	ㅇ     ㅈ     ㅊ     ㅋ     ㅌ	   ㅍ	  ㅎ
  130B , 010B , 010C , 010D , 010E , 0110 , 0111 , 0112 , 0113 , 0114 ,

CREATE ㄹ초성>겹받침표	\ ㄹ과 겹받침을 만들수 있는 초성이면 겹받침값, 아니면 0
\ *   채움   ㄱ   ㄲ   ㄴ   ㄷ	 ㄸ   ㄹ   ㅁ	 ㅂ    ㅃ
  0 C, 0 C, 0A C, 0 C, 0 C, 0 C, 0 C, 0 C, 0B C, 0C C, 0 C,
\ ㅅ	ㅆ   ㅇ   ㅈ   ㅉ   ㅊ	 ㅋ   ㅌ    ㅍ	  ㅎ
  0D C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0E C, 0F C, 10 C,  ALIGN

CREATE 겹>홑중성표  \ 겹중성에 대해 앞홑중성값, 겹중성이 아니면 0
\   *	*   채움 ㅏ   ㅐ   ㅑ	ㅒ   ㅓ    *	*
   0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C, 0 C,
\ ㅔ   ㅕ   ㅖ	  ㅗ   ㅘ    ㅙ    *	*    ㅚ    ㅛ
   0 C, 0 C, 0 C, 0 C, 0D C, 0D C, 0 C, 0 C, 0D C, 0 C,
\ ㅜ   ㅝ    ㅞ    ㅟ	 *    *    ㅠ	ㅡ   ㅢ   ㅣ
  0 C, 14 C, 14 C, 14 C, 0 C, 0 C, 0 C, 0 C, 1B C, 0 C,

: 초성>겹초성? ( 초성 -- 초성 0 | 겹초성 -1 )
    DUP 미완성자초성 = IF
	DUP CHARS 초성>겹초성표 + C@ 1 = IF 1+ -1 EXIT THEN  THEN
    0 ;
: 겹초성?  ( 초성 -- 0 | 16비트한글자 )
    초성>겹초성? IF   초성바꿔 입력계속
		 ELSE 미완성자 @ SWAP 채움!  초성바꿔 THEN ;
: 초성>받침?  ( 초성 -- 초성 0 | 받침 -1 )
	DUP CHARS  초성>받침표 + C@ DUP IF NIP -1 EXIT THEN ;
: ㄹ초성>겹받침   ( 초성 -- 0|겹받침 )	 CHARS	ㄹ초성>겹받침표 + C@ ;
: 겹>홑중성   ( 중성 -- 0|홑중성 )   CHARS  겹>홑중성표 + C@ ;
: 겹>앞홑받침 ( 받침 -- 0|홑받침 )
	CELLS  받침>홑받침초성표 +  @  8 RSHIFT  DUP 채움받침 <>  AND ;
: 받침>받침초성  ( 받침 -- 받침 초성 )
	CELLS 받침>홑받침초성표 + @  DUP 8 RSHIFT  SWAP 0FF AND ;

\ 닿소리가 ㄸ, ㅃ, ㅉ이면 완성, 아니면 받침에 넣고 계속
: 받침?  ( 초성 -- 0 | 16비트한글자 )
    초성>받침?	IF   받침바꿔  입력계속
		ELSE 미완성자 @  SWAP  채움!  초성바꿔	THEN ;
: >3?  ( -- 3|4 )   미완성자중성  겹>홑중성 0= ( -1|0) 4 + ;
: >5?  ( -- 2|5 )   미완성자받침  채움받침 = ( -1|0) 3 * 5 + ;
: >6?  ( -- 2|6 )   미완성자받침  채움받침 = ( -1|0) 2* 2* 6 + ;

: 초성>겹받침?	( 초성 -- 초성 0 | 겹받침 -1 )
    미완성자받침
    CASE
      ( ㄱ) 02 OF DUP ( ㅅ) 0B = IF DROP 04 -1 EXIT THEN  ENDOF
      ( ㅂ) 13 OF DUP ( ㅅ) 0B = IF DROP 14 -1 EXIT THEN  ENDOF
      ( ㄴ) 05 OF DUP ( ㅈ) 0E = IF DROP 06 -1 EXIT THEN
		  DUP ( ㅎ) 14 = IF DROP 07 -1 EXIT THEN  ENDOF
      ( ㄹ) 09 OF DUP ㄹ초성>겹받침 ?DUP IF NIP -1 EXIT THEN  ENDOF
    ENDCASE  0 ;

: 겹받침?  ( 초성 -- 0 | 16비트한글자 )
	초성>겹받침? IF  받침바꿔 입력계속  ELSE  완+초  THEN ;
: 홑받침  ( 뒷쇠 -- 0 )
	DROP  미완성자받침  겹>앞홑받침 받침바꿔  입력계속 ;

: 중성>겹중성?	( 중성 -- 중성 0 | 겹중성 -1 )
    미완성자중성
    CASE
      ( ㅡ) 1B OF DUP ( ㅣ) 1D = IF DROP 1C -1 EXIT THEN
		  0 EXIT				    ENDOF
      ( ㅗ) 0D OF DUP ( ㅏ) 03 = IF DROP 0E -1 EXIT THEN
		  DUP ( ㅐ) 04 = IF DROP 0F -1 EXIT THEN
		  DUP ( ㅣ) 1D = IF DROP 12 -1 EXIT THEN
		  0 EXIT				    ENDOF
      ( ㅜ) 14 OF DUP ( ㅓ) 07 = IF DROP 15 -1 EXIT THEN
		  DUP ( ㅔ) 0A = IF DROP 16 -1 EXIT THEN
		  DUP ( ㅣ) 1D = IF DROP 17 -1 EXIT THEN
		  0 EXIT				    ENDOF
    ENDCASE  0 ;

: 겹중성?  ( 중성 -- 0 | 16비트한글자 )
	중성>겹중성? IF  중성바꿔 입력계속  ELSE  완+중  THEN ;
: 홑중성  ( 뒷쇠 -- 0 )
	DROP  미완성자중성  겹>홑중성 중성바꿔	입력계속 ;

\ 미완성자에서 받침을 뺀 글자를 완성자로 내보내고
\ 그 받침을 미완성자의 초성에 넣고 중성을 미완성자에 넣음
: 완+초중  ( 중성 -- 16비트자 )
    미완성자받침 받침>받침초성		\ 중성 새받침 초성
    SWAP 받침바꿔 미완성자 @		\ 중성 초성 16비트한글자
    채움!  SWAP 초성바꿔 2 상태기억 앞자기억  SWAP 중성바꿔 ;

CREATE 영쇠>한글자
\  a>ㅁ  b>ㅠ  c>ㅊ  d>ㅇ  e>ㄷ  f>ㄹ  g>ㅎ  h>ㅗ  i>ㅑ  j>ㅓ
   308 , 41A , 310 , 30D , 305 , 307 , 314 , 40D , 405 , 407 ,
\  k>ㅏ  l>ㅣ  m>ㅡ  n>ㅜ  o>ㅐ  p>ㅔ  q>ㅂ  r>ㄱ  s>ㄴ  t>ㅅ
   403 , 41D , 41B , 414 , 404 , 40A , 309 , 302 , 304 , 30B ,
\  u>ㅕ  v>ㅍ  w>ㅈ  x>ㅌ  y>ㅛ  z>ㅋ
   40B , 313 , 30E , 312 , 413 , 311 ,

CREATE 영윗쇠>한글자
\  A>A	 B>B   C>C   D>D   E>ㄸ  F>F   G>G   H>H   I>I	 J>J
   041 , 042 , 043 , 044 , 306 , 046 , 047 , 048 , 049 , 04A ,
\  K>K	 L>L   M>M   N>N   O>ㅒ  P>ㅖ  Q>ㅃ  R>ㄲ  S>S	 T>ㅆ
   04B , 04C , 04D , 04E , 406 , 40C , 30A , 303 , 053 , 30C ,
\  U>U	 V>V   W>ㅉ  X>X   Y>Y	 Z>Z
   055 , 056 , 30F , 058 , 059 , 05A ,

\ EKEY 로 받은 값에서 글쇠의 종류를 '>글자-2벌식'로 넘김
\ 2벌식에서 글쇠 종류는 다섯 가지:
\ 한영바꿈(1), 뒷쇠(2), 닿소리(3), 홀소리(4), 나머지(0)
: >글쇠값과종류-2벌식  ( 글쇠값 -- 글쇠값' 종류 )
   0FF AND						\ special key 는 무시
   DUP BL = 왼쪽윗쇠눌림? AND IF DROP 0 1 EXIT THEN	\ 한영바꿈글쇠이면 0 1
   DUP 뒷쇠=  IF DROP 8 2 EXIT THEN			\ 뒷글쇠이면
   DUP [CHAR] A [CHAR] Z 1+ WITHIN 글쇠입력상태 @ AND IF \ 한글입력이고 A-Z 이면
	[CHAR] A -  CELLS   영윗쇠>한글자
	[ 영쇠>한글자 영윗쇠>한글자 - ] LITERAL CapsLock? AND
	+ + @  DUP 0FF AND SWAP 8 RSHIFT EXIT			THEN
   DUP [CHAR] a [CHAR] z 1+ WITHIN 글쇠입력상태 @ AND IF \ 한글입력이고 a-z 이면
	[CHAR] a -  CELLS   영쇠>한글자
	[ 영윗쇠>한글자 영쇠>한글자 - ] LITERAL CapsLock? AND
	+ + @  DUP 0FF AND SWAP 8 RSHIFT EXIT			THEN
   0 ;					\ 나머지

\ 2벌식 자판 상태
\  0 : 영문 입력
\  1 : 한글입력 시작
\  2 : 초성 입력
\  3 : 초성+중성 입력 ( 초성에 채움 글자도 허용 )
\  4 : 초성+겹중성 입력 ( 초성에 채움 글자도 허용 )
\  5 : 초성+중성+받침 입력
\  6 : 초성+중성+겹받침 입력
5 칸 오토마타: >글자-2벌식
\ 입력|   나머지?  | 한영바꿈?	|   뒷쇠?    |	  닿소리?    |	 홀소리?   |
\ 상태----------------------------------------------------------------------
 ( 0) | 그냥  | >0 | 채움! | >1 | 그냥 | >0  | 그냥    | >0  | 그냥    | >0
 ( 1) | 그냥  | >1 | 그냥  | >0 | 그냥 | >1  | 초성!   | >2  | 중성!   | >3
 ( 2) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 겹초성? | >2  | 중성!   | >3
 ( 3) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 받침?   | >5? | 겹중성? | >3?
 ( 4) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 받침?   | >5? | 완+중   | >3
 ( 5) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 겹받침? | >6? | 완+초중 | >3
 ( 6) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 완+초   | >2  | 완+초중 | >3
;오토마타

\
\  3벌식 자판 입력에 필요한 낱말들
\

CREATE ㄹ받침>겹받침표	\ ㄹ과 겹받침을 만들수 있는 받침이면 겹받침값, 아니면 0
\  *   채움   ㄱ    ㄲ	  ㄳ	ㄴ    ㄵ    ㄶ	  ㄷ	ㄹ
   0 C,  0 C, 0A C,  0 C,  0 C,  0 C,  0 C,  0 C,  0 C,  0 C,
\ ㄺ	ㄻ    ㄼ    ㄽ	  ㄾ	ㄿ    ㅀ    ㅁ	   *	ㅂ
   0 C,  0 C,  0 C,  0 C,  0 C,  0 C,  0 C, 0B C,  0 C, 0C C,
\ ㅄ	ㅅ    ㅆ    ㅇ	  ㅈ	ㅊ    ㅋ    ㅌ	  ㅍ	ㅎ
   0 C, 0D C,  0 C,  0 C,  0 C,  0 C,  0 C, 0E C, 0F C, 10 C, ALIGN

: 받침!    ( 받침 -- 0 )	  받침바꿔 입력계속 ;
: 완+받침  ( 받침 -- 16비트자 )   미완성자 @  채움!  SWAP 받침바꿔 ;
: ㄹ받침>겹받침  ( 받침 -- 0|겹받침 )	CHARS  ㄹ받침>겹받침표 + C@ ;
: 받침>겹받침?	( 받침 -- 받침 0 | 겹받침 -1 )
    미완성자받침
    CASE
      ( ㄱ) 02 OF DUP ( ㄱ) 02 = IF DROP 03 -1 EXIT THEN
		      ( ㅅ) 15 = IF DROP 04 -1 EXIT THEN  ENDOF
      ( ㅂ) 13 OF DUP ( ㅅ) 15 = IF DROP 14 -1 EXIT THEN  ENDOF
      ( ㅅ) 15 OF DUP ( ㅅ) 15 = IF DROP 16 -1 EXIT THEN  ENDOF
      ( ㄴ) 05 OF DUP ( ㅈ) 18 = IF DROP 06 -1 EXIT THEN
		  DUP ( ㅎ) 1D = IF DROP 07 -1 EXIT THEN  ENDOF
      ( ㄹ) 09 OF DUP ㄹ받침>겹받침 ?DUP IF NIP -1 EXIT THEN  ENDOF
    ENDCASE  0 ;
: 겹받침?  ( 받침 -- 0 | 16비트한글자 )
	받침>겹받침? IF  받침바꿔 입력계속  ELSE  완+받침  THEN ;

CREATE 3벌쇠>한글자
\  !>ㅈ  ">"   #>#   $>$   %>%   &>&   '>ㅌ  (>(   )>)   *>*   +>+   ,>,
   518 , 022 , 023 , 024 , 025 , 026 , 312 , 028 , 029 , 02A , 02B , 02C ,
\  ->-	 .>.   />ㅗ  0>ㅋ  1>ㅎ  2>ㅆ  3>ㅂ  4>ㅛ  5>ㅠ  6>ㅑ  7>ㅖ  8>ㅢ
   02D , 02E , 40D , 311 , 51D , 516 , 513 , 413 , 41A , 405 , 40C , 41C ,
\  9>ㅜ  :>:   ;>ㅂ  <>2   =>=	 >>3   ?>?   @>@   A>ㄷ  B>!   C>ㄻ  D>ㄺ
   414 , 03A , 309 , 032 , 03D , 033 , 03F , 040 , 508 , 021 , 50B , 50A ,
\  E>ㅋ  F>ㄲ  G>/   H>'   I>8   J>4   K>5   L>6   M>1   N>0   O>9   P>>
   51A , 503 , 02F , 027 , 038 , 034 , 035 , 036 , 031 , 030 , 039 , 03E ,
\  Q>ㅍ  R>ㅒ  S>ㄶ  T>;   U>7	 V>ㅀ  W>ㅌ  X>ㅄ  Y>8	 Z>ㅊ  [>[   \>\
   51C , 406 , 507 , 03B , 037 , 510 , 51B , 514 , 038 , 519 , 05B , 05C ,
\  ]>]	 ^>^   _>_   `>`   a>ㅇ  b>ㅜ  c>ㅔ  d>ㅣ  e>ㅕ  f>ㅏ  g>ㅡ  h>ㄴ
   05D , 05E , 05F , 060 , 517 , 414 , 40A , 41D , 40B , 403 , 41B , 304 ,
\  i>ㅁ  j>ㅇ  k>ㄱ  l>ㅈ  m>ㅎ  n>ㅅ  o>ㅊ  p>ㅍ  q>ㅅ  r>ㅐ  s>ㄴ  t>ㅓ
   308 , 30D , 302 , 30E , 314 , 30B , 310 , 313 , 515 , 404 , 505 , 407 ,
\  u>ㄷ  v>ㅗ  w>ㄹ  x>ㄱ  y>ㄹ  z>ㅁ  {>{   |>|   }>}	 ~>~
   305 , 40D , 509 , 502 , 307 , 511 , 07B , 07C , 07D , 07E ,

\ EKEY 로 받은 값에서 글쇠의 종류를 '>글자-3벌식'으로 넘김
\ 3벌식에서 글쇠 종류는 다섯 가지:
\   한영바꿈(1), 뒷쇠(2), 초성(3), 중성(4), 받침(5), 나머지(0)
: >글쇠값과종류-3벌식  ( 글쇠값 -- 글쇠값' 종류 )
   0FF AND						\ special key 는 무시
   DUP BL = 왼쪽윗쇠눌림? AND IF DROP 0 1 EXIT THEN	\ 한영바꿈글쇠이면 0 1
   DUP 뒷쇠=  IF DROP 8 2 EXIT THEN			\ 뒷글쇠이면
   DUP BL > 0= IF 0 EXIT THEN				\ 제어문자나 빈칸이면
   글쇠입력상태 @ 0= IF 0 EXIT THEN			\ 영문입력
   CapsLock? IF
       DUP [CHAR] A [CHAR] Z 1+ WITHIN IF
	   [ CHAR a CHAR A - ] LITERAL +
       ELSE DUP [CHAR] a [CHAR] z 1+ WITHIN IF
	   [ CHAR A CHAR a - ] LITERAL +    THEN THEN THEN
   [CHAR] ! - CELLS 3벌쇠>한글자 + @
   DUP 0FF AND SWAP 8 RSHIFT ;

\ 3벌식 자판 상태
\  0 : 영문 입력
\  1 : 한글입력 시작
\  2 : 초성 입력
\  3 : 초성+중성 입력 ( 초성에 채움 글자도 허용 )
\  4 : 초성+겹중성 입력 ( 초성에 채움 글자도 허용 )
\  5 : 초성+중성+받침 입력
\  6 : 초성+중성+겹받침 입력
6 칸 오토마타: >글자-3벌식
\ 입력|   나머지?  | 한영바꿈?	|   뒷쇠?    |	   초성?    |	 중성?	    |	받침?	   |
\ 상태--------------------------------------------------------------------------------------
 ( 0) | 그냥  | >0 | 채움! | >1 | 그냥 | >0  | 그냥    | >0 | 그냥    | >0  | 그냥     | >0
 ( 1) | 그냥  | >1 | 그냥  | >0 | 그냥 | >1  | 초성!   | >2 | 중성!   | >3  | 받침!    | >5
 ( 2) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 겹초성? | >2 | 중성!   | >3  | 받침!    | >5
 ( 3) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 완+초   | >2 | 겹중성? | >3? | 받침!    | >5
 ( 4) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 완+초   | >2 | 완+중   | >3  | 받침!    | >5
 ( 5) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 완+초   | >2 | 완+중   | >3  | 겹받침?  | >5?
 ( 6) | 완+ch | >1 | 완성  | >0 | 뒤로 | >뒤 | 완+초   | >2 | 완+중   | >3  | 완+받침  | >5
;오토마타

' >글자-2벌식         VALUE '>글자
' >글쇠값과종류-2벌식 VALUE '>글쇠값과종류
: >글자 	  '>글자         EXECUTE ;
: >글쇠값과종류   '>글쇠값과종류 EXECUTE ;

NONSTANDARD-WORDLIST SET-CURRENT
: 2BUL ( -- )
    ['] >글자-2벌식         TO '>글자
    ['] >글쇠값과종류-2벌식 TO '>글쇠값과종류 ;
: 3BUL ( -- )
    ['] >글자-3벌식         TO '>글자
    ['] >글쇠값과종류-3벌식 TO '>글쇠값과종류 ;
한글입출력-WORDLIST SET-CURRENT

: HEKEY
   글쇠통 @ ?DUP IF		\ 글쇠통에 글자가 있으면 그 글자를 보냄
     DUP 0FF00 AND		\ 글쇠통에 두 글자가 있으면 위 8 비트를 보냄
     IF DUP 8 RSHIFT
	SWAP 0FF AND
	글쇠통 ! EXIT THEN
     0 글쇠통 ! EXIT  THEN	\ 글쇠통의 한 글자를 보냄
   미완성자 @  채움자  <>  글쇠입력상태 @  AND	IF  미완성자보여  THEN
   BEGIN  BEGIN PAUSE RX? UNTIL  RX@  >글쇠값과종류  >글자  ?DUP UNTIL
	\ BEGIN ... UNTIL 을 빠져 나올 때 더미에 남은 값은
	\   8 비트 : 한 글자 : 그냥
	\  16 비트 : 두 글자 : 완성 , 완+초 , 완+초중 , ...
	\  16 비트 : 세 글자 : 완성+ch ( char 값은 글쇠통 에 들어 있음 )
   DUP 0FF00 AND IF		\ 16비트 한글자이면 나머지 글자를 글쇠통에 담음
     DUP 8 RSHIFT SWAP 0FF AND	\ 더미: 위8비트 아래8비트
     글쇠통 @ ?DUP IF		\ 더미: 위8비트 아래8비트 char
       SWAP 8 LSHIFT OR THEN
     글쇠통 !
   THEN ;

: HEKEY?
    미완성자 @ 채움자 <> 글쇠통 @ OR IF -1 ELSE RX? THEN ;

: SET-TEXT-I/O	( -- )
    ['] RX? TO 'ekey?
    ['] RX@ TO 'ekey
    ['] TX! TO 'emit ;

: SET-HGRAPHIC-I/O
    ['] HEKEY? TO 'ekey?
    ['] HEKEY  TO 'ekey
    ['] HEMIT  TO 'emit ;

NONSTANDARD-WORDLIST SET-CURRENT

DECIMAL VARIABLE 깜박임
0 60 CELLS 60 CELLS HAT multiI/O  multiI/O BUILD
0 60 CELLS 60 CELLS HAT HCURSOR   HCURSOR BUILD

: TEXT
    textmode# SET-MODE
    SET-TEXT-I/O
    0 TO GRAPHIC?
    multiI/O SLEEP  HCURSOR SLEEP ;

HEX
CODE ReadClockCount  ( -- ud )
    BX PUSH,
    AX AX XOR,	\ MOV AH,00
    1A INT,
    DX PUSH,
    CX BX MOV,
    NEXT,
END-CODE

DECIMAL
: 깜박임조절  ( -- )
    ReadClockCount
    BEGIN 2DUP DNEGATE ReadClockCount D+ DROP UNTIL 2DROP
    ReadClockCount
    -1 0 DO PAUSE 0 0 BL EFONT! 0 0 BL EFONT!
	    2DUP DNEGATE ReadClockCount D+ DROP
	    IF 2DROP I 깜박임 ! UNLOOP EXIT THEN LOOP
    2DROP -1 깜박임 ! ;

: HGRAPHIC
    VGA? IF
	3 TO textmode#
	['] VGA-SET-GRAPHIC TO 'SET-GRAPHIC
	VGA-Y>SegTable Y>SegTable !
	30 TO MAX-Y		\ 640X480 해상도; 480 / 16 = 30 줄
    ELSE HERC? IF
	7 TO textmode#
	['] HERC-SET-GRAPHIC TO 'SET-GRAPHIC
	HERC-Y>SegTable Y>SegTable !
	25 TO MAX-Y		\ 640X400 해상도; 400 / 16 = 25 줄
	MAX-Y 0 DO 1 MAX-X* 0 DO I J BL EFONT! LOOP LOOP
    ELSE SET-TEXT-I/O  0 TO GRAPHIC?
	 ." Korean characters can be displayed only on VGA or Hercules Graphics screen."
	 multiI/O SLEEP HCURSOR SLEEP EXIT
    THEN THEN
    VSCREEN VSCREEN-SIZE CHARS BL FILL
    SET-GRAPHIC
    0 HCHAR !
    0 글쇠입력상태 !
    0 글쇠통 !
    채움!
    0 VSCR0 !
    0 YY !  0 VIR_Y !
    0 XX !  0 VIR_X !
    SET-HGRAPHIC-I/O
    multiI/O AWAKE  HCURSOR SLEEP  깜박임조절  HCURSOR AWAKE ;

한글입출력-WORDLIST SET-CURRENT

: NEW-SET-I/O
    GRAPHIC? IF SET-HGRAPHIC-I/O ELSE SET-TEXT-I/O THEN ;

HEX
: NEW-hi
    DOSCommand>PAD
    GET-MODE TO OldMode# HGRAPHIC hi
    ." 의견과 제안과 비평을 위 인터넷 주소나 하이텔 wykoh로 보내 주십시오." CR
    S" BLOCKS.BLK" MAPPED-TO-BLOCK  QUIT ;

' NEW-SET-I/O TO 'init-i/o
' NEW-hi TO 'boot

: XX+!	( n -- )
   XX @ + MAX-X /MOD YY +! XX ! ;

FALSE VALUE SCREEN-UPDATED?

HEX
:NONAME multiI/O ACTIVATE
	BEGIN
	   PAUSE
	   YY @ MAX-X* XX @ + DUP VIR_Y @ MAX-X* VIR_X @ + <	IF
	      FALSE TO SCREEN-UPDATED?
	      YY @ VIR_Y @ < IF YY @ 1+ MAX-X*
			     ELSE VIR_Y @ MAX-X* VIR_X @ + THEN
	      SWAP
	      BEGIN DUP >VSCR-ADDR C@
		    DUP 80 <				IF
			 XX @ YY @ ROT EFONT! 1 XX+!	ELSE
			 8 LSHIFT >R
			 CHAR+ DUP >VSCR-ADDR C@ R> OR
			 XX @ YY @ ROT HFONT! 2 XX+!	THEN
	      CHAR+ 2DUP > 0= UNTIL 2DROP			ELSE
	      TRUE TO SCREEN-UPDATED?
	      DROP VIR_X @ XX ! VIR_Y @ YY !			THEN
	AGAIN
; EXECUTE

:NONAME HCURSOR ACTIVATE
	BEGIN
	  깜박임 @ 0 DO PAUSE LOOP
	  SCREEN-UPDATED?				    IF
	    GRAPHIC?					IF
		글쇠입력상태 @	?DUP		   IF
		    1-			  IF
		    미완성자보여	  ELSE
		    XX @ YY @ [CHAR] _ EFONT! THEN ELSE
		    XX @ YY @ [CHAR] - EFONT!	   THEN THEN
	    깜박임 @ 0 DO PAUSE LOOP
	    GRAPHIC?				   IF
		XX @ YY @ BL EFONT!
		글쇠입력상태 @		      IF
		    XX @ CHAR+ YY @ BL EFONT! THEN THEN     THEN
	AGAIN
; EXECUTE

한글입출력-WORDLIST SET-CURRENT

HEX
CODE textAT-XY	( column row -- )
    2 # AH MOV,
    DX POP,
    BL DH MOV,
    BX BX XOR,
    10 INT,
    BX POP,
    NEXT,
END-CODE

FORTH-WORDLIST SET-CURRENT

\   AT-XY	( u1 u2 -- )			\ FACILITY
\		Perform implementation-dependent steps so that the next
\		character displayed will appear in column u1, row u2 of the
\		user output device, the upper left corner of which is column
\		zero, row zero.  An ambiguous condition exists if the
\		operation cannot be performed on the user output Adevice
\		with the specified parameters.
: AT-XY
   GRAPHIC? IF DUP YY ! VIR_Y ! DUP XX ! VIR_X !
   ELSE textAT-XY THEN ;

\   PAGE	( -- )				\ FACILITY
\		Move to another page for output. Actual function depends on
\		the output device.  On a terminal, PAGE clears the screen
\		and resets the cursor position to the upper left corner. On
\		a printer, PAGE performs a form feed.
DECIMAL
: PAGE
    GRAPHIC? IF MAX-Y 0 DO 1 MAX-X* 0 DO
		    BL J MAX-X* I + >VSCR-ADDR C!  I J BL EFONT!
		LOOP LOOP
		0 TO YTop
    ELSE 0 0 AT-XY 25 0 DO 80 0 DO BL EMIT LOOP LOOP
    THEN 0 0 AT-XY ;

: BYE	OldMode# SET-MODE  BYE ;

HGRAPHIC

SET-CURRENT  SET-ORDER
BASE !
